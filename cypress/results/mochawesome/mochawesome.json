{
  "stats": {
    "suites": 1,
    "tests": 11,
    "passes": 11,
    "pending": 0,
    "failures": 0,
    "start": "2025-01-09T19:55:41.232Z",
    "end": "2025-01-09T19:56:03.918Z",
    "duration": 22686,
    "testsRegistered": 11,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "99fe39c5-0b96-463e-b100-52cebab80c03",
      "title": "",
      "fullFile": "cypress\\e2e\\firstTests.spec.js",
      "file": "cypress\\e2e\\firstTests.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b6908e6a-5c5c-4f47-970e-50c7d7b0c10d",
          "title": "First test suite",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "first test",
              "fullTitle": "First test suite first test",
              "timedOut": null,
              "duration": 2273,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Finding locators\ncy.visit('/');\ncy.contains('Forms').click();\ncy.contains('Form Layouts').click();\n// by Tag name\ncy.get('input');\n// by id #\ncy.get('#inputEmail1');\n// by class value .\ncy.get('.input-full-width');\n// by attribute name []\ncy.get('[fullwidth]');\n// by attribute and value\ncy.get('[placeholder=\"Email\"]');\n// by entire class value \ncy.get('[class=\"input-full-width size-medium shape-rectangle\"]');\n// by two attributes \ncy.get('[placeholder=\"Email\"][fullwidth]');\n//by tag, attribute id and class, which web element have all of those\ncy.get('input[placeholder=\"Email\"]#inputEmail1.input-full-width');\n//by cypress test id (data-cy)\ncy.get('[data-cy=\"imputEmail1\"]');",
              "err": {},
              "uuid": "3ef32b6c-72a0-487c-8f41-77e046a82cc4",
              "parentUUID": "b6908e6a-5c5c-4f47-970e-50c7d7b0c10d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "second test",
              "fullTitle": "First test suite second test",
              "timedOut": null,
              "duration": 2117,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/');\ncy.contains('Forms').click();\ncy.contains('Form Layouts').click();\n// get () - used to find elements on the page by locator globally\n// find() - find child elements by locator, can not bi cy.find must be a child to the parent element\n// contains () - find HTML text and by text and locator, only looking for the first match on the page\ncy.contains('Sign in');\ncy.contains('[status=\"warning\"]', 'Sign in');\ncy.contains('nb-card', 'Horizontal form').find('button');\ncy.contains('nb-card', 'Horizontal form').contains('Sign in');\ncy.contains('nb-card', 'Horizontal form').get('button'); // will find all button elements on the entire page\n//cypress chains and Dom\ncy.get('#inputEmail3').parents('form').find('button').should('contain', 'Sign in').parents('form').find('nb-checkbox').click();",
              "err": {},
              "uuid": "13ffdbe9-ba25-478f-a281-19848ff7cd18",
              "parentUUID": "b6908e6a-5c5c-4f47-970e-50c7d7b0c10d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "save subject of the command",
              "fullTitle": "First test suite save subject of the command",
              "timedOut": null,
              "duration": 1765,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/');\ncy.contains('Forms').click();\ncy.contains('Form Layouts').click();\ncy.contains('nb-card', 'Using the Grid').find('[for=\"inputEmail1\"]').should('contain', 'Email');\ncy.contains('nb-card', 'Using the Grid').find('[for=\"inputPassword2\"]').should('contain', 'Password');\n// CANT DO THING LIKE THIS\n/* const usingTheGrid=  cy.contains('nb-card', 'Using the Grid')\n usingTheGrid.find('[for=\"inputEmail1\"]').should('contain','Email')\n usingTheGrid.find('[for=\"inputPassword2\"]').should('contain','Password') */\n// 1 Cypress Alias\ncy.contains('nb-card', 'Using the Grid').as('usingTheGrid');\ncy.get('@usingTheGrid').find('[for=\"inputEmail1\"]').should('contain', 'Email');\ncy.get('@usingTheGrid').find('[for=\"inputPassword2\"]').should('contain', 'Password');\n// 2 Cypress then() methods\ncy.contains('nb-card', 'Using the Grid').then(usingTheGridForm => {\n  cy.wrap(usingTheGridForm).find('[for=\"inputEmail1\"]').should('contain', 'Email');\n  cy.wrap(usingTheGridForm).find('[for=\"inputPassword2\"]').should('contain', 'Password');\n});",
              "err": {},
              "uuid": "b10e7c7f-2123-47e0-93ac-9f5a30cc29b8",
              "parentUUID": "b6908e6a-5c5c-4f47-970e-50c7d7b0c10d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "extract text values",
              "fullTitle": "First test suite extract text values",
              "timedOut": null,
              "duration": 1764,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/');\ncy.contains('Forms').click();\ncy.contains('Form Layouts').click();\n//1 \ncy.get('[for=\"exampleInputEmail1\"]').should('contain', 'Email address');\n//2\ncy.get('[for=\"exampleInputEmail1\"]').then(label => {\n  const labelText = label.text();\n  expect(labelText).to.equal('Email address');\n  cy.wrap(labelText).should('contain', 'Email address');\n});\n//3\ncy.get('[for=\"exampleInputEmail1\"]').invoke('text').then(text => {\n  expect(text).to.equal('Email address');\n});\ncy.get('[for=\"exampleInputEmail1\"]').invoke('text').as('labelText').should('contain', 'Email address');\n//4\ncy.get('[for=\"exampleInputEmail1\"]').invoke('attr', 'class').then(classValue => {\n  expect(classValue).to.equal('label');\n});\n//5 invoke properties , the text exists in the input field\ncy.get('#exampleInputEmail1').type('test@test.com');\ncy.get('#exampleInputEmail1').invoke('prop', 'value').should('contain', 'test@test.com').then(property => {\n  expect(property).to.equal('test@test.com');\n});",
              "err": {},
              "uuid": "675a1edb-4e23-47aa-9d78-a66e24eefbf6",
              "parentUUID": "b6908e6a-5c5c-4f47-970e-50c7d7b0c10d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "radio buttons",
              "fullTitle": "First test suite radio buttons",
              "timedOut": null,
              "duration": 1235,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/');\ncy.contains('Forms').click();\ncy.contains('Form Layouts').click();\n// can be used only for input type radio or checkbox \ncy.contains('nb-card', 'Using the Grid').find('[type=\"radio\"]').then(radioButtons => {\n  cy.wrap(radioButtons).eq(0).check({\n    force: true\n  }).should('be.checked');\n  cy.wrap(radioButtons).eq(1).check({\n    force: true\n  });\n  cy.wrap(radioButtons).eq(0).should('not.be.checked');\n  cy.wrap(radioButtons).eq(2).should('be.disabled');\n});",
              "err": {},
              "uuid": "7cc0692a-9eae-4b60-8245-4a3a59e2af56",
              "parentUUID": "b6908e6a-5c5c-4f47-970e-50c7d7b0c10d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "checkboxes",
              "fullTitle": "First test suite checkboxes",
              "timedOut": null,
              "duration": 1649,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/');\ncy.contains('Modal & Overlays').click();\ncy.contains('Toastr').click();\n// can use click only on the first element (click does not care of the status of the checkbox if its checked or not)\ncy.get('[type=\"checkbox\"]').eq(0).click({\n  force: true\n});\ncy.get('[type=\"checkbox\"]').eq(1).check({\n  force: true\n});\n// all will be checked, skipping those that are checked by default \ncy.get('[type=\"checkbox\"]').check({\n  force: true\n});\n//  all will be unchecked, skipping those that are unchecked by default\ncy.get('[type=\"checkbox\"]').uncheck({\n  force: true\n});",
              "err": {},
              "uuid": "505aa777-efab-4896-96d7-6e5ad571f285",
              "parentUUID": "b6908e6a-5c5c-4f47-970e-50c7d7b0c10d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Date picker",
              "fullTitle": "First test suite Date picker",
              "timedOut": null,
              "duration": 2489,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "function selectDayFromCurrent(day) {\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\n  let date = new Date();\n  date.setDate(date.getDate() + day); // adding +5 days from todays date, if we add +30 days the month won't be changed, if we add +60 the arrow wont be clicked we need function loop\n  console.log(date);\n  let futureDay = date.getDate();\n  let futureMonth = date.toLocaleDateString('en-US', {\n    month: 'short'\n  });\n  let futureYear = date.getFullYear();\n  let dateToAssert = `${futureMonth} ${futureDay}, ${futureYear}`;\n  cy.get('nb-calendar-navigation').invoke('attr', 'ng-reflect-date').then(dateAttribute => {\n    if (!dateAttribute.includes(futureMonth) || !dateAttribute.includes(futureYear)) {\n      cy.get('[data-name=\"chevron-right\"]').click();\n      selectDayFromCurrent(day);\n    } else {\n      cy.get('.day-cell').not('.bounding-month').contains(futureDay).click();\n    }\n  });\n  return dateToAssert;\n}\ncy.visit('/');\ncy.contains('Forms').click();\ncy.contains('Datepicker').click();\ncy.contains('nb-card', 'Common Datepicker').find('input').then(input => {\n  cy.wrap(input).click();\n  const dateToAssert = selectDayFromCurrent(200);\n  cy.wrap(input).invoke('prop', 'value').should('contain', dateToAssert);\n  cy.wrap(input).should('have.value', dateToAssert);\n});",
              "err": {},
              "uuid": "e4a12f4b-6181-43c4-b374-ae248f7dc21b",
              "parentUUID": "b6908e6a-5c5c-4f47-970e-50c7d7b0c10d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Lists and dropdowns",
              "fullTitle": "First test suite Lists and dropdowns",
              "timedOut": null,
              "duration": 1329,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/');\n//1\ncy.get('nav nb-select').click();\ncy.get('.options-list').contains('Dark').click();\ncy.get('nav nb-select').should('contain', 'Dark');\n//2\ncy.get('nav nb-select').then(dropDown => {\n  cy.wrap(dropDown).click();\n  cy.get('.options-list nb-option').each((listItem, index) => {\n    const itemText = listItem.text().trim();\n    cy.wrap(listItem).click();\n    cy.wrap(dropDown).should('contain', itemText);\n    if (index < 3) {\n      cy.wrap(dropDown).click();\n    }\n  });\n});",
              "err": {},
              "uuid": "c24f22fc-44a0-4a38-81e5-70976930c831",
              "parentUUID": "b6908e6a-5c5c-4f47-970e-50c7d7b0c10d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Web Tables",
              "fullTitle": "First test suite Web Tables",
              "timedOut": null,
              "duration": 5095,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/');\ncy.contains('Tables & Data').click();\ncy.contains('Smart Table').click();\n//1 Get row by text\ncy.get('tbody').contains('tr', 'Larry').then(tablerow => {\n  cy.wrap(tablerow).find('.nb-edit').click();\n  cy.wrap(tablerow).find('[placeholder=\"Age\"]').clear().type('29');\n  cy.wrap(tablerow).find('.nb-checkmark').click();\n  cy.wrap(tablerow).find('td').eq(6).should('contain', '29');\n});\n//2 Get row by index\ncy.get('thead').find('.nb-plus').click();\ncy.get('thead').find('tr').eq(2).then(tableRow => {\n  cy.wrap(tableRow).find('[placeholder=\"First Name\"]').type(\"John\");\n  cy.wrap(tableRow).find('[placeholder=\"Last Name\"]').type(\"Smith\");\n  cy.wrap(tableRow).find('.nb-checkmark').click();\n});\ncy.get('tbody tr').first().find('td').then(tableColumns => {\n  cy.wrap(tableColumns).eq(2).should('contain', 'John');\n  cy.wrap(tableColumns).eq(3).should('contain', 'Smith');\n});\n//3 Get each row validation\nconst age = [20, 30, 40, 200];\ncy.wrap(age).each(age => {\n  cy.get('thead [placeholder=\"Age\"]').clear().type(age);\n  cy.wait(500);\n  cy.get('tbody tr').each(tableRow => {\n    if (age == 200) {\n      cy.wrap(tableRow).should('contain', 'No data found');\n    } else {\n      cy.wrap(tableRow).find('td').eq(6).should('contain', age);\n    }\n  });\n});",
              "err": {},
              "uuid": "8c4e057a-3a54-4c80-b56c-b3f61c5df3b4",
              "parentUUID": "b6908e6a-5c5c-4f47-970e-50c7d7b0c10d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "tooltip",
              "fullTitle": "First test suite tooltip",
              "timedOut": null,
              "duration": 1375,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/');\ncy.contains('Modal & Overlays').click();\ncy.contains('Tooltip').click();\ncy.contains('nb-card', 'Colored Tooltips').contains('Default').click();\ncy.get('nb-tooltip').should('contain', 'This is a tooltip');",
              "err": {},
              "uuid": "cc36e057-ed57-4846-8546-5eed94080f5e",
              "parentUUID": "b6908e6a-5c5c-4f47-970e-50c7d7b0c10d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "dialog box",
              "fullTitle": "First test suite dialog box",
              "timedOut": null,
              "duration": 1155,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/');\ncy.contains('Tables & Data').click();\ncy.contains('Smart Table').click();\n//1 Not a good method\ncy.get('tbody tr').first().find('.nb-trash').click();\ncy.on('windiw:confirm', confirm => {\n  expect(confirm).to.equal('Are you sure you want to delete?');\n});\n//2 \nconst stub = cy.stub();\ncy.on('window:confirm', stub);\ncy.get('tbody tr').first().find('.nb-trash').click().then(() => {\n  expect(stub.getCall(0)).to.be.calledWith('Are you sure you want to delete?');\n});\n//3\ncy.get('tbody tr').first().find('.nb-trash').click();\ncy.on('window:confirm', () => false);",
              "err": {},
              "uuid": "85a98600-0d82-4b7c-8ed2-22abfbb21fea",
              "parentUUID": "b6908e6a-5c5c-4f47-970e-50c7d7b0c10d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3ef32b6c-72a0-487c-8f41-77e046a82cc4",
            "13ffdbe9-ba25-478f-a281-19848ff7cd18",
            "b10e7c7f-2123-47e0-93ac-9f5a30cc29b8",
            "675a1edb-4e23-47aa-9d78-a66e24eefbf6",
            "7cc0692a-9eae-4b60-8245-4a3a59e2af56",
            "505aa777-efab-4896-96d7-6e5ad571f285",
            "e4a12f4b-6181-43c4-b374-ae248f7dc21b",
            "c24f22fc-44a0-4a38-81e5-70976930c831",
            "8c4e057a-3a54-4c80-b56c-b3f61c5df3b4",
            "cc36e057-ed57-4846-8546-5eed94080f5e",
            "85a98600-0d82-4b7c-8ed2-22abfbb21fea"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 22246,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/results/mochawesome",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}