{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 0,
    "pending": 0,
    "failures": 1,
    "start": "2025-01-09T19:56:27.732Z",
    "end": "2025-01-09T19:56:29.383Z",
    "duration": 1651,
    "testsRegistered": 5,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 4,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "30aca68a-3ada-47c1-8cad-5628c15db434",
      "title": "",
      "fullFile": "cypress\\e2e\\workingwithAPIsTests.spec.js",
      "file": "cypress\\e2e\\workingwithAPIsTests.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "820974e0-7b15-4fc9-9022-42b62d842ca9",
          "title": "Test with backend",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "verify correct request and response",
              "fullTitle": "Test with backend verify correct request and response",
              "timedOut": null,
              "duration": 479,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.intercept('POST', Cypress.env(\"apiUrl\") + '/api/articles/').as('postArticles');\nlet articleTitle = _faker.faker.word.noun();\ncy.contains('New Article').click();\ncy.get('[formcontrolname=\"title\"]').type(articleTitle); // the title needs to be unique so the article can be created\ncy.get('[formcontrolname=\"description\"]').type(\"A Description\");\ncy.get('[formcontrolname=\"body\"]').type(\"A Body\");\ncy.contains('Publish Article').click();\ncy.wait('@postArticles').then(xhr => {\n  console.log(xhr);\n  expect(xhr.response.statusCode).to.equal(201);\n  expect(xhr.request.body.article.body).to.equal('A Body');\n  expect(xhr.response.body.article.description).to.equal('A Description');\n});",
              "err": {
                "message": "CypressError: `cy.request()` failed on:\n\nhttps://conduit-api.bondaracademy.com/api/users/login\n\nThe response we received from your web server was:\n\n  > 403: Forbidden\n\nThis was considered a failure because the status code was not `2xx` or `3xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n\n-----------------------------------------------------------\n\nThe request we sent was:\n\nMethod: POST\nURL: https://conduit-api.bondaracademy.com/api/users/login\nHeaders: {\n  \"Connection\": \"keep-alive\",\n  \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Cypress/13.17.0 Chrome/118.0.5993.159 Electron/27.3.10 Safari/537.36\",\n  \"accept\": \"*/*\",\n  \"accept-encoding\": \"gzip, deflate\",\n  \"content-type\": \"application/json\",\n  \"content-length\": 53\n}\nBody: {\"user\":{\"email\":\"$username\",\"password\":\"$password\"}}\n\n-----------------------------------------------------------\n\nThe response we got was:\n\nStatus: 403 - Forbidden\nHeaders: {\n  \"x-powered-by\": \"Express\",\n  \"vary\": \"Origin\",\n  \"content-type\": \"application/json; charset=utf-8\",\n  \"etag\": \"W/\\\"2f-83PWxEwXkLR3WfVjo3wqB0FwKlU\\\"\",\n  \"x-cloud-trace-context\": \"e5c8c801ddd854ec79c85d727d55e130\",\n  \"date\": \"Thu, 09 Jan 2025 19:56:29 GMT\",\n  \"server\": \"Google Frontend\",\n  \"content-length\": \"47\"\n}\nBody: {\n  \"errors\": {\n    \"email or password\": [\n      \"is invalid\"\n    ]\n  }\n}\n\n\nhttps://on.cypress.io/request\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Test with backend`",
                "estack": "CypressError: `cy.request()` failed on:\n\nhttps://conduit-api.bondaracademy.com/api/users/login\n\nThe response we received from your web server was:\n\n  > 403: Forbidden\n\nThis was considered a failure because the status code was not `2xx` or `3xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n\n-----------------------------------------------------------\n\nThe request we sent was:\n\nMethod: POST\nURL: https://conduit-api.bondaracademy.com/api/users/login\nHeaders: {\n  \"Connection\": \"keep-alive\",\n  \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Cypress/13.17.0 Chrome/118.0.5993.159 Electron/27.3.10 Safari/537.36\",\n  \"accept\": \"*/*\",\n  \"accept-encoding\": \"gzip, deflate\",\n  \"content-type\": \"application/json\",\n  \"content-length\": 53\n}\nBody: {\"user\":{\"email\":\"$username\",\"password\":\"$password\"}}\n\n-----------------------------------------------------------\n\nThe response we got was:\n\nStatus: 403 - Forbidden\nHeaders: {\n  \"x-powered-by\": \"Express\",\n  \"vary\": \"Origin\",\n  \"content-type\": \"application/json; charset=utf-8\",\n  \"etag\": \"W/\\\"2f-83PWxEwXkLR3WfVjo3wqB0FwKlU\\\"\",\n  \"x-cloud-trace-context\": \"e5c8c801ddd854ec79c85d727d55e130\",\n  \"date\": \"Thu, 09 Jan 2025 19:56:29 GMT\",\n  \"server\": \"Google Frontend\",\n  \"content-length\": \"47\"\n}\nBody: {\n  \"errors\": {\n    \"email or password\": [\n      \"is invalid\"\n    ]\n  }\n}\n\n\nhttps://on.cypress.io/request\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Test with backend`\n    at <unknown> (http://localhost:4200/__cypress/runner/cypress_runner.js:132876:72)\n    at tryCatcher (http://localhost:4200/__cypress/runner/cypress_runner.js:1830:23)\n    at Promise._settlePromiseFromHandler (http://localhost:4200/__cypress/runner/cypress_runner.js:1542:31)\n    at Promise._settlePromise (http://localhost:4200/__cypress/runner/cypress_runner.js:1599:18)\n    at Promise._settlePromise0 (http://localhost:4200/__cypress/runner/cypress_runner.js:1644:10)\n    at Promise._settlePromises (http://localhost:4200/__cypress/runner/cypress_runner.js:1724:18)\n    at _drainQueueStep (http://localhost:4200/__cypress/runner/cypress_runner.js:2430:12)\n    at _drainQueue (http://localhost:4200/__cypress/runner/cypress_runner.js:2423:9)\n    at Async._drainQueues (http://localhost:4200/__cypress/runner/cypress_runner.js:2439:5)\n    at Async.drainQueues (http://localhost:4200/__cypress/runner/cypress_runner.js:2309:14)\nFrom Your Spec Code:\n    at Context.eval (webpack://ngx-admin/./cypress/support/commands.js:51:7)",
                "diff": null
              },
              "uuid": "02e6f3e8-603f-49c1-aba5-1b09f1e4c613",
              "parentUUID": "820974e0-7b15-4fc9-9022-42b62d842ca9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "intercepting and modifying the request and response",
              "fullTitle": "Test with backend intercepting and modifying the request and response",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*  cy.intercept('POST',Cypress.env(\"apiUrl\") +'/api/articles/',(req =>{\n      req.body.article.description =\"A Description 2\"\n  })).as('postArticles')*/\ncy.intercept('POST', Cypress.env(\"apiUrl\") + '/api/articles/', req => {\n  req.reply(res => {\n    expect(res.body.article.description).to.equal('A Description');\n    res.body.article.description = \"A Description 2\";\n  });\n}).as('postArticles');\nlet articleTitle = _faker.faker.word.noun();\ncy.contains('New Article').click();\ncy.get('[formcontrolname=\"title\"]').type(articleTitle); // the title needs to be unique so the article can be created\ncy.get('[formcontrolname=\"description\"]').type(\"A Description\");\ncy.get('[formcontrolname=\"body\"]').type(\"A Body\");\ncy.contains('Publish Article').click();\ncy.wait('@postArticles').then(xhr => {\n  console.log(xhr);\n  expect(xhr.response.statusCode).to.equal(201);\n  expect(xhr.request.body.article.body).to.equal('A Body');\n  expect(xhr.response.body.article.description).to.equal('A Description 2');\n});",
              "err": {},
              "uuid": "15781d83-0a99-4d98-9181-ef5de58bc9cf",
              "parentUUID": "820974e0-7b15-4fc9-9022-42b62d842ca9",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "verify popular tags are intercepted",
              "fullTitle": "Test with backend verify popular tags are intercepted",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('.tag-list').should('contain', 'cypress').and('contain', 'automation').and('contain', 'testing');",
              "err": {},
              "uuid": "69d70446-4258-48d6-89bb-47d0834d2fa1",
              "parentUUID": "820974e0-7b15-4fc9-9022-42b62d842ca9",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "verify global feed likes count",
              "fullTitle": "Test with backend verify global feed likes count",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.intercept('GET', Cypress.env(\"apiUrl\") + '/api/articles/feed*', {\n  \"articles\": [],\n  \"articlesCount\": 0\n}); // * wild card this is in your feed section\ncy.intercept('GET', Cypress.env(\"apiUrl\") + '/api/articles*', {\n  fixture: 'articles.json'\n});\ncy.contains('Global Feed').click();\ncy.get('app-article-list button').then(heartList => {\n  expect(heartList[0]).to.contain('1');\n  expect(heartList[1]).to.contain('5');\n});\ncy.fixture('articles').then(file => {\n  const articleLink = file.articles[1].slug;\n  file.articles[1].favoritesCount = 6;\n  cy.intercept('POST', Cypress.env(\"apiUrl\") + '/api/articles/' + articleLink + '/favorite', file);\n});\ncy.get('app-article-list button').eq(1).click().should('contain', '6');",
              "err": {},
              "uuid": "d824712e-f0ae-4759-ae8c-9e4829cf4136",
              "parentUUID": "820974e0-7b15-4fc9-9022-42b62d842ca9",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "delete a new article in a global feed",
              "fullTitle": "Test with backend delete a new article in a global feed",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const bodyRequest = {\n  \"article\": {\n    \"body\": \"API 123456\",\n    \"description\": \"API testing\",\n    \"tagList\": [],\n    \"title\": \"Request from API\"\n  }\n};\ncy.get('@token').then(token => {\n  cy.request({\n    url: Cypress.env(\"apiUrl\") + '/api/articles/',\n    headers: {\n      'Authorization': 'Token ' + token\n    },\n    method: 'POST',\n    body: bodyRequest\n  }).then(response => {\n    expect(response.status).to.equal(201);\n  });\n  cy.contains('Global Feed').click();\n  cy.wait(500);\n  cy.get('.article-preview').first().click();\n  cy.wait(500);\n  cy.get('.article-actions').contains('Delete Article').click();\n  cy.wait(500);\n  cy.request({\n    url: Cypress.env(\"apiUrl\") + '/api/articles?limit=10&offset=0',\n    headers: {\n      'Authorization': 'Token ' + token\n    },\n    method: 'GET'\n  }).its('body').then(body => {\n    expect(body.articles[0].title).not.to.equal('Request from API');\n  });\n});",
              "err": {},
              "uuid": "2a36cc4c-4a12-468e-a213-7710a0f3ce46",
              "parentUUID": "820974e0-7b15-4fc9-9022-42b62d842ca9",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "02e6f3e8-603f-49c1-aba5-1b09f1e4c613"
          ],
          "pending": [],
          "skipped": [
            "15781d83-0a99-4d98-9181-ef5de58bc9cf",
            "69d70446-4258-48d6-89bb-47d0834d2fa1",
            "d824712e-f0ae-4759-ae8c-9e4829cf4136",
            "2a36cc4c-4a12-468e-a213-7710a0f3ce46"
          ],
          "duration": 479,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/results/mochawesome",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}